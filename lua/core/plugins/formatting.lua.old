return {
	"stevearc/conform.nvim",
	event = { "BufReadPre", "BufNewFile" },
	config = function()
		local conform = require("conform")
		local util = require("conform.util")

		conform.setup({
			formatters_by_ft = {
				javascript = { "prettier" },
				css = { "prettier" },
				html = { "prettier" },
				json = { "prettier" },
				yaml = { "prettier" },
				markdown = { "prettier" },
				lua = { "stylua" },
				-- python = { "black", "isort", "docformatter" },
				python = { "ruff_fix", "ruff_format", "isort", "docformatter" },
				rust = { "rustfmt" },
			},
			formatters = {

				docformatter = {
					command = "docformatter",
					args = {
						"$FILENAME",
						"--in-place",
					},
					cwd = util.root_file({
						-- https://docformatter.readthedocs.io/en/latest/configuration.html
						"pyproject.toml",
						"setup.cfg",
						"tox.ini",
					}),
				},
			},
			-- 	docformatter = {
			-- 		-- Change where to find the command
			-- 		command = "~/Local/nvim-data/mason/bin/docformatter",
			-- 		args = { "FILENAME" },
			-- 		-- -- Adds environment args to the yamlfix formatter
			-- 		-- env = {
			-- 		-- 	YAMLFIX_SEQUENCE_STYLE = "block_style",
			-- 		-- },
			-- 	},
			-- 	docformatter = {
			-- 		command = "docformatter",
			-- 		args = {
			-- 			"--in-place",
			-- 			-- "--config",
			-- 			-- "./pyproject.toml",
			-- 		},
			-- 		-- cwd = require("conform.util").root_file({ "~/AppData/Local/nvim-data/mason/bin" }),
			-- 		-- require_cwd = true,
			-- 	},
			-- },
			--
			--format_on_save = {
			--  lsp_fallback = true,
			--  async = false,
			--  timeout_ms = 1000,
			--},
		})

		vim.keymap.set({ "n", "v" }, "<leader>mp", function()
			conform.format({
				lsp_fallback = false,
				async = false,
				timeout_ms = 1000,
			})
		end, { desc = "Conform format file or range" })
	end,
}
